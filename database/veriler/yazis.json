[
    {
       "id":"1",
       "baslik":"PHP Nedir?",
       "url":"php_nedir_",
       "icerik":"<p>PHP&nbsp;(açılımı <em>PHP: Hypertext Preprocessor<\/em>) geniş bir kitle tarafından kullanılan, özellikle sanal y&ouml;reler &uuml;zerinde geliştirme i&ccedil;in tasarlanmış HTML i&ccedil;ine g&ouml;m&uuml;lebilen bir betik dilidir.<\/p><p>Tamam da, bu tam olarak ne anlama gelmektedir? Bir &ouml;rnek:<\/p><p><strong>&Ouml;rnek 1 - Başlangı&ccedil; olarak bir &ouml;rnek<\/strong><\/p>\n            <pre>\n<code class='language-php'>&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;Örnek&lt;\/title&gt;\n\t&lt;\/head&gt;\n\t&lt;body&gt;\n\t\t&lt;?php echo 'Merhaba, ben bir PHP betiğiyim!'; ?&gt;\n\t&lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n            <p>Bir PHP betiğinin Perl ya da C gibi dillerden ne kadar farklı bir yapıda olduğuna dikkat edin. HTML kodu oluşturmak i&ccedil;in bir s&uuml;r&uuml; kod yazacağınıza, istediğiniz işi yapan bir PHP kodu yazıp onu HTML kodunun i&ccedil;ine g&ouml;m&uuml;yorsunuz (bu &ouml;rnekte, yapılan iş ekrana yazı yazmak). PHP kodu&nbsp;<a href='\/yazi\/php-syntax' target='_blank'><code>&lt;?php<\/code>&nbsp;ve&nbsp;<code>?&gt;<\/code><\/a>&nbsp;&ouml;zel başlangı&ccedil; ve bitiş etiketleriarasına yazılır. Bu etiketler &quot;PHP kipine&quot; rahatlıkla girip &ccedil;ıkabilmenizi sağlarlar.<\/p><p>PHP&#39;yi Javascript gibi kullanıcı tarafında &ccedil;alışan dillerden ayıran, sunucu tarafında &ccedil;alıştırılıyor olmasıdır. Yukardaki &ouml;rnekteki kodu kendi sunucunuzda &ccedil;alıştırırsanız, sitenize bağlanan kullanıcılar kodu g&ouml;remeyecekler ve m&uuml;dahale edemeyecekler, yalnızca sonucu g&ouml;rebileceklerdir. Dilerseniz HTTP sunucunuzu b&uuml;t&uuml;n HTML dosyalarınızı PHP dosyası olarak g&ouml;r&uuml;p işleyecek hale bile getirebilirsiniz. Buna rağmen kullanıcılar sizin ger&ccedil;ekte sunucu taraflı bir uygulama kullandığınızı fark edemeyebilirler.<\/p><p>PHP kullanmanın en g&uuml;zel yanlarından biri, yeni kullanıcılar i&ccedil;in &ouml;ğreniminin olduk&ccedil;a kolay olması ve aynı zamanda profesyonel kullanıcılar i&ccedil;in ileri seviyede &ouml;zellikler i&ccedil;ermesidir. PHP&#39;nin uzun &ouml;zellikler listesini okumaktan korkmayın. Kısa s&uuml;rede PHP ile programlamaya başlayabilir ve birka&ccedil; saat i&ccedil;ersinde basit programlar yazmaya başlayabilirsiniz.<\/p><p>PHP&#39;nin gelişimi sunucu-taraflı programlamaya odaklanmışsa da, &ccedil;ok daha fazlasını yapmanıza olanak tanıyan ara&ccedil;lara da sahiptir.<\/p>",
       "kategori_id":"1",
       "user_id":"1",
       "etiketler":"php,laravel,mvc",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"2",
       "baslik":"Laravel Nedir?",
       "url":"laravel_nedir_",
       "icerik":"<h3><img src='\/upload\/files\/laravel.png' \/><\/h3><h3><strong>Laravel nedir?<\/strong><\/h3><p>Laravel, PHP dili ile yazılmış, g&uuml;&ccedil;l&uuml; bir frameworkd&uuml;r. Taylor Otwell &ouml;nderliğinde geliştirmektedir.&nbsp; S&ouml;z dizimi basit ve anlamlıdır. Bu sebeple &ouml;ğrenmesi daha kolaydır. Laravel i&ccedil;inde bir&ccedil;ok yapıyı ve &ouml;zelliği barındırır. Bunun sonucunda basit web uygulamalarında ya da karmaşık web sayfalarında rahatlıkla kullanılabilir.<\/p><p>Laravel&rsquo;in sloganı &ldquo;The PHP Framework For Web Artisans&rdquo; yani &ldquo;Web sanat&ccedil;ılarının PHP Framework&uuml;&rdquo; d&uuml;r.<\/p><h3><strong>Laravel kimler i&ccedil;indir?<\/strong><\/h3><p>Laravel, profesyonel ya da amat&ouml;r web geliştiricileri tarafından kullanılabilir. OOP yapısı sebebiyle daha derli toplu, temiz, okunabilir kod yazılmasına olanak sağlar.<\/p><h3><strong>Laravel &ouml;ğrenmek i&ccedil;in &ouml;n koşullar nelerdir?<\/strong><\/h3><p>Laravel ile geliştirme yapmaya başlamak i&ccedil;in, HTML\/CSS bilgisine ve orta seviye PHP bilgisine ihtiya&ccedil; vardır. PHP hakkında hi&ccedil; bilgim yok bu eğitimi anlayamam diyenler i&ccedil;in &ouml;nerimiz, <a href='\/kategori\/php\/' target='_blank'>PHP Eğitimlerine<\/a>&nbsp;g&ouml;z atması ve bu dersleri bitirdikten sonra Laravel eğitimlerine devam etmesidir.<\/p><h3><strong>La<\/strong><strong>ravel ile ilgili &ouml;nemli bilgiler nelerdir?<\/strong><\/h3><ul><li>Bağımlılık y&ouml;neticisi (Dependency Manager) olarak <a href='\/yazi\/composer' target='_blank'><strong>Composer<\/strong><\/a> kullanır.<\/li><li>İ&ccedil;inde <a class='external' href='\/yazi\/eloquent' target='_blank'><strong>Eloquent ORM<\/strong><\/a> (Object Relational Mapping)&rsquo;yi barındırır. Bu yapıda veritabanındaki her bir tabloya karşılık gelen bir model sınıfı bulunur. Bu sayede uzun sorgu c&uuml;mleleri yerine &ccedil;ok daha basit şekilde veritabanı sorguları yapmanızı sağlar. Ayrıca farklı veritabanlarından (Mysql, PostgreSql, MongoDB vb.) sorgularınızda değişiklik yapmadan sorgu yapabilme imk&acirc;nı sunar.<\/li><li>Template engine olarak &ldquo;<a href='\/yazi\/blade' target='_blank'><strong>Blade<\/strong><\/a>&rdquo; kullanmaktadır. MVC(Model, View, Controller) mimarisinde View (V) kısmında denk gelmektedir. Bu yapı sayesinde php ve html kodlarımızı birbirinden ayırma imkanı sağlar.<\/li><li>Gelişmiş <strong>routing<\/strong> yapısı sayesinde URL yapınızı hızlı ve kolay bir şekilde filtreleyebilir, controllera y&ouml;nlendirebilirsiniz.<\/li><li>Laravelin i&ccedil;erisinde kimlik doğrulama (<strong>Authentication<\/strong>) yapısı hazır olarak bulunmaktadır. Sadece birka&ccedil; komut yardımıyla login\/logout\/register gibi kullanıcı işlemleri uygulamanıza dahil edilebilir.<\/li><li>Sadece birka&ccedil; satır kod ile verileri otomatik sayfalama (<strong>Pagination<\/strong>) &ouml;zelliği bulunmaktadır.<\/li><li>Form ve veri girişi kısımlarında b&uuml;t&uuml;nleşik <a href='\/yazi\/csrf' target='_blank'><strong>CSRF<\/strong><\/a> koruması bulunmaktadır.<\/li><li>Migration ve seeder yapısıyla veritabanında tablo oluşturma, versiyonlama ve veri girişi işlemleri daha basit şekilde y&ouml;netilebilir.<\/li><li>Yapısında bir&ccedil;ok &ldquo;<a href='https:\/\/symfony.com\/' target='_blank'><strong>symfony framework<\/strong><\/a>&rdquo; bileşenini barındırmaktadır. Ama Laravel &ouml;ğrenmemiz i&ccedil;in bizim symfony framework bilmemize gerek yoktur.<\/li><\/ul>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"mvc,oop",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"3",
       "baslik":"Laravel Kurulumu-Windows",
       "url":"laravel-kurulumu-windows",
       "icerik":"<p><strong>Laravel i&ccedil;in sunucu gereklilikleri nelerdir?<\/strong><\/p><p>Şuan ki son Laravel versiyonu 5.8&rsquo;t&uuml;r. Anlatım 5.8 &uuml;zerinden devam edecektir.<\/p><p><a href='https:\/\/laravel.com\/docs\/5.8\/installation' rel='noopener nofollow' target='_blank'>Laravel&rsquo;in d&ouml;k&uuml;mantasyonunda<\/a>&nbsp;belirtiği &uuml;zere eğer laravel i&ccedil;in sağlanmış sanal makine kullanmak istemiyorsak aşağıdaki mod&uuml;lleri manuel olarak kurmalıyız.<\/p><ul><li>PHP &gt;= 7.1.3<\/li><li>BCMath PHP Extension<\/li><li>Ctype PHP Extension<\/li><li>JSON PHP Extension<\/li><li>Mbstring PHP Extension<\/li><li>OpenSSL PHP Extension<\/li><li>PDO PHP Extension<\/li><li>Tokenizer PHP Extension<\/li><li>XML PHP Extension<\/li><\/ul><p><strong>Peki, biz bu gereklilikleri nasıl sağlayacağız?<\/strong><\/p><ul><li>Bunun i&ccedil;in &ldquo;<a href='https:\/\/laravel.com\/docs\/5.8\/homestead' rel='noopener nofollow' target='_blank'>Laravel Homestead<\/a>&rdquo; kullanabilirsiniz. Bu hepsi bir arada (all in one) bir &ccedil;&ouml;z&uuml;md&uuml;r.<\/li><li>PHP&rsquo;yi kendiniz kurabilirsiniz.<\/li><li>Wamp\/Xammp gibi bir &ccedil;&ouml;z&uuml;m kullanabilirsiniz. (<strong>Bu eğitimde bu y&ouml;ntemi kullanacağız.<\/strong>)<\/li><\/ul><h2><strong>Xampp kurulumu<\/strong><\/h2><p>Xampp kurulumu i&ccedil;in&nbsp;<a href='https:\/\/www.apachefriends.org\/tr\/download.html' rel='noopener' target='_blank'>tıklayınız.<\/a><\/p><p><strong>!!<\/strong>&nbsp;Dikkat etmeniz gereken PHP s&uuml;r&uuml;m&uuml;n&uuml;n en az 5.6.4 olması gerektiğidir.<\/p><h2><strong>Composer Kurulumu<\/strong><\/h2><p>Xampp kurulumunu tamamladıktan sonra daha &ouml;nce bahsetmiş olduğumuz &ldquo;<strong>Composer<\/strong>&rdquo; (Dependency Manager\/Bağımlılık Y&ouml;neticisi) y&uuml;klememiz gerekiyor. Composer&rsquo;ı&nbsp;<a href='https:\/\/getcomposer.org\/download\/' rel='noopener nofollow' target='_blank'>https:\/\/getcomposer.org\/download\/<\/a>&nbsp;adresinden indirip kuralım. Dikkat edilmesi gereken nokta composer&#39;i kurmadan &ouml;nce sisteminizde php\/xampp kurulu olması gerekiyor.<\/p><h2><strong>Laravel Kurulumu<\/strong><\/h2><p>Laravel&rsquo;i kurmak i&ccedil;in kullanabileceğimiz bir&ccedil;ok y&ouml;ntem var.<\/p><ol><li>Composer aracılığı ile kurma,<ol><li>&quot;<strong>composer global require laravel\/installer<\/strong>&quot; komutunu konsol ekranında &ccedil;alıştıralım.<\/li><li>Laravel projesi oluşturulmak istenilen dizinde &quot;<strong>laravel new proje_ismi<\/strong>&quot; diyerek kurabiliriz.<\/li><\/ol><\/li><li>Laravel&#39;i t&uuml;m sistemimizde global tanımlamak yerine composer aracılığı ile direk githubtan indirebiliriz.<ol><li>&quot;<strong>composer create-project --prefer-dist laravel\/laravel proje_ismi<\/strong>&quot;<\/li><\/ol><\/li><\/ol><p>Projemizi &ccedil;alıştırmak i&ccedil;in ilgili dizine komut satırı ile gidip &quot;<strong>php artisan serve<\/strong>&quot; yazmak. Ekranda &ouml;rnek olarak &quot;<strong>http:\/\/127.0.0.1:8000<\/strong>&quot; gibi bir url verecek. Tek yapılması gereken browserdan bu adrese gimek<\/p><p><img alt='php artisan serve' src='\/upload\/files\/laravel_run.png' \/><\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,composer,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"4",
       "baslik":"Laravel Uygulama Yapısı",
       "url":"laravel-uygulama-yapisi",
       "icerik":"<h2><strong>Laravel Anadizin Yapısı<\/strong><\/h2><ul><li><strong>app:&nbsp;<\/strong>Bu klas&ouml;r i&ccedil;erisinde uygulamanın asıl kodları bulunacaktır.<\/li><li><strong>bootstrap:&nbsp;<\/strong>Uygulamanın autoload ve cache (&ouml;nbellek) kısımlarını barındırmaktadır.<\/li><li><strong>config:&nbsp;<\/strong>Uygulamanın ayar dosyaları bu klas&ouml;rde bulunmaktadır.<\/li><li><strong>database:&nbsp;<\/strong>Veritabanı operasyonları i&ccedil;in kullanılan &ldquo;Seeds&rdquo; ve &ldquo;Migrations&rdquo; bu klas&ouml;rde bulunmaktadır.<\/li><li><strong>public:&nbsp;<\/strong>Bu klas&ouml;r uygulamanın &ldquo;document root&rdquo; kısmıdır. Laravel&rsquo;in &ccedil;alışmasını başlatır ayrıca &ldquo;Assets&rdquo; (Javascrip, CSS, Resimler vb.) kısmını barındırır.<\/li><li><strong>resources:&nbsp;<\/strong>Bu klas&ouml;rde herhangi bir işlem yapılmamış (Sıkıştırma, Birleştirme, Gizleme vs) dosyalar, view (g&ouml;r&uuml;n&uuml;m) dosyaları ve dil dosyaları bulunmaktadır.<\/li><li><strong>storage:&nbsp;<\/strong>Bu klas&ouml;r uygulamanın depolama alanıdır. İ&ccedil;erisinde, dosya y&uuml;klemelerini, &ouml;nbellekleme (cache) dosyalarını ve uygulamanın log dosyalarını barındırır.<\/li><li><strong>tests:&nbsp;<\/strong>Bu klas&ouml;r test dosyalarını barındırır.<\/li><li><strong>vendor:&nbsp;<\/strong>Bu klas&ouml;rde uygulamanın &ldquo;Composer Dependencies&rdquo; (paket bağımlılıkları) bulunmaktadır.<\/li><\/ul><h2><strong>Laravel App Klas&ouml;r&uuml; Yapısı<\/strong><\/h2><ul><li><strong>Console:<\/strong>&nbsp;T&uuml;m &ldquo;<u>artisan<\/u>&rdquo; komutları bu klas&ouml;rde bulunmaktadır.<\/li><li><strong>Http:<\/strong>&nbsp;&ldquo;<u>Controllers<\/u>&rdquo;, &ldquo;<u>Middleware<\/u>&rdquo;, &ldquo;<u>Request<\/u>&rdquo; bu klas&ouml;rde bulunmaktadır.<\/li><li><strong>Exceptions:<\/strong>&nbsp;&Ouml;zel &ldquo;<u>Exception Handlers<\/u>&rdquo; bu klas&ouml;rde bulunmaktadır.<\/li><li><strong>Providers:&nbsp;<\/strong>&nbsp;&ldquo;<u>Providers<\/u>&rdquo; (Servis Sağlayıcılar) bu klas&ouml;rde bulunmaktadır.<\/li><\/ul>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,composer,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"5",
       "baslik":"Laravel Konfigürasyonu",
       "url":"laravel-konfigurasyonu",
       "icerik":"<h2><strong>Kurulum Sonrası Kontroller<\/strong><\/h2><p>&Ouml;ncelikle, Laravel kurulumundan sonra yapmamız gereken birka&ccedil; kontrol ve işlem bulunmaktadır.<\/p><ol><li>Ana dizinde bulunan &ldquo;storage&rdquo; ve &ldquo;bootstrap\/cache&rdquo; klas&ouml;rlerinin yazma izni kontrol&uuml; yapılmadır, yazma izni yoksa yazma izni verilmelidir.<\/li><li>&ldquo;<strong>php artisan key:generate<\/strong>&rdquo; komutu ile uygulama anahtarı oluşturulmalıdır. Bu anahtar session ve diğer şifrelenmiş verilerin g&uuml;venliğinde kullanılacaktır.<\/li><li>Ana dizinde &ldquo;<em>.env<\/em>&rdquo; dosyası olup olmadığı kontrol&uuml; yapılmadır. Bu dosya composer ile kurulumda yada &ldquo;php artisan key:generate&rdquo; komutuyla otomatik olarak oluşmalıdır. Eğer yoksa &ldquo;.env.example&rdquo; dosyasının adı &ldquo;.env&rdquo; yapılıp, &ldquo;<strong>php artisan key:generate<\/strong>&rdquo; komutu tekrar &ccedil;alıştırılmalıdır. &ldquo;<em>.env<\/em>&rdquo; dosyası&nbsp;geliştirme ortamımız ile ilgili değişkenleri i&ccedil;ermektedir.<\/li><\/ol><h3><strong>Konfig&uuml;rasyon Dosyaları&nbsp; ve Geliştirme Ortamı Konfig&uuml;rasyonu<\/strong><\/h3><ul><li><strong>app.php<\/strong>: Bu dosyada uygulamamız ile ilgili ayarlar bulunmaktadır. (Uygulama adı, adresi, debug durumu, dil ve timezone gibi ayarlar bulunmaktadır.)<\/li><li><strong>database.php<\/strong>: Veritabanı ile ilgili ayarlar bulunmaktadır. (Varsayılan veritabanı bağlantı t&uuml;r&uuml;, desteklenen veritabanı bağlantı bilgileri vb. ayarlar bulunmaktadır. )<\/li><\/ul><p>Bu yazıda y&uuml;ksek &ouml;neme sahip 2 dosyadan bahsettik.<\/p><p>database.php i&ccedil;eriği:<\/p>\n<pre>\n<code class='language-php'>'mysql' =&gt; [\n    'driver' =&gt; 'mysql',\n    'url' =&gt; env('DATABASE_URL'),\n    'host' =&gt; env('DB_HOST', '127.0.0.1'),\n    'port' =&gt; env('DB_PORT', '3306'),\n    'database' =&gt; env('DB_DATABASE', 'laravel'),\n    'username' =&gt; env('DB_USERNAME', 'root'),\n    'password' =&gt; env('DB_PASSWORD', ''),\n    'unix_socket' =&gt; env('DB_SOCKET', ''),\n    'charset' =&gt; 'utf8',\n    'collation' =&gt; 'utf8_unicode_ci',\n    'prefix' =&gt; '',\n    'prefix_indexes' =&gt; true,\n    'strict' =&gt; true,\n    'engine' =&gt; null,\n    'options' =&gt; extension_loaded('pdo_mysql') ? array_filter([\n        PDO::MYSQL_ATTR_SSL_CA =&gt; env('MYSQL_ATTR_SSL_CA'),\n]) : [],\n],<\/code><\/pre>\n            <p>&ldquo;env&rdquo; fonksiyonunun kullanıldığını g&ouml;rmekteyiz.&nbsp;Peki, bu &ldquo;env&rdquo; fonksiyonu ne işe yarar?&nbsp;Dersin başında &ldquo;.env&rdquo; olarak isimlendirdiğimiz dosyadaki parametreleri, config dosyalarımızda kullandığımız env() fonksiyonu ile okuyabiliriz.<\/p>\n            <pre>\n<code class='language-php'>env('.env dosyasındaki parametre adı', 'varsayılan değer')<\/code><\/pre><p>şeklinde kullanılabilir.&nbsp;.env dosyası geliştirme ortamımızın konfig&uuml;rasyon bilgilerini tek bir yerden y&ouml;netmemizi sağlar.&nbsp;Birden &ccedil;ok geliştirme ortamı olması durumunda, .env.testing, .env.production, .env.local gibi ayarlamalar yapılabilir.&nbsp;Tanımlamış olduğumuz konfig&uuml;rasyon değişkenlerine uygulama i&ccedil;erisinde aşağıdaki şekilde ulaşabiliriz.<\/p>\n<pre><code class='language-php'>&#0036value = config('config dosyası adı.parametre anahtarı');\n&#0036value = config('app.timezone');<\/code><\/pre>\n<h3><strong>Bakım Modu (maintenance mode)<\/strong><\/h3>\n<p>Bakım modu aktif edildiğinde, sitenize gelen ziyaret&ccedil;iler bakım modu ekranını g&ouml;r&uuml;rler. Bu s&uuml;re&ccedil;te sitenizde herhangi bir işlem yapılamaz. Siz de gerekli gerekli g&uuml;ncelleme veya geliştirmeleri sitenize uygulayabilirsiniz.<\/p>\n<p>Bakım modu;<\/p>\n<pre>\n<code class='language-php'>php artisan down<\/code>\n<\/pre>\n<p>komutuyla aktif edilir.<\/p>\n<pre>\n<code class='language-php'>php artisan up<\/code><\/pre>\n<p>komutuyla inaktif edilir. Ayrıntılı mesaj vermek ve belirli s&uuml;relerde ziyaret&ccedil;inin otomatik deneme yapmasını isterseniz,<\/p>\n<pre>\n<code class='language-php'>php artisan down --message='Veritabanı güncelleniyor.' --retry=60<\/code><\/pre><p><img alt='' src='\/upload\/files\/laraveldown.png' \/><\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,framework,config",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"6",
       "baslik":"Laravel Route Sistemi ve Kullanımı",
       "url":"laravel-route-sistemi-ve-kullanimi",
       "icerik":"\n<p>Route kullanımı laravel kurulumundan sonra sistemi &ouml;ğrenmek i&ccedil;in atılacak temel adımdır. Route ile sisteminize gelecek olan istekleri&nbsp;<strong>Controller<\/strong>,&nbsp;<strong>View<\/strong>&nbsp;gibi b&ouml;l&uuml;mlere y&ouml;nlendir ve istek i&ccedil;in &ccedil;alışacak kod par&ccedil;acıklarına ulaşırsınız. Bunun i&ccedil;in laravel framework yapısını route ile &ouml;ğrenmeye başlamak uygun olacaktır.<\/p><p>G&uuml;ncel d&ouml;k&uuml;mana bu <a href='https:\/\/laravel.com\/docs\/5.8\/routing' target='_blank'>adresten<\/a> ulaşabilirsiniz.&nbsp;Laravel kurulum dizininde yer alan &lsquo;<strong>routes\/web.php<\/strong>&rsquo; dosyasını a&ccedil;ıyoruz.&nbsp;Sıfır kurulum yaptığımızı d&uuml;ş&uuml;n&uuml;rsek eğer karşımıza yorum kısmı hari&ccedil; aşağıdaki kod gelecektir.<\/p>\n<pre>\n<code class='language-php'>Route::get('\/', function () {\n    return view('welcome');\n});<\/code><\/pre>\n<p>Bu kod, sitenizin giriş ekranı yani &lsquo;\/&rsquo; i&ccedil;in &lsquo;welcome&rsquo;&nbsp;<strong>View<\/strong>&nbsp;dosyasının &ccedil;alışacağını belirtir. Burada yer alan &lsquo;<u>Route::get&hellip;<\/u>&rsquo; b&ouml;l&uuml;m&uuml; ise isteğin geldiği methodu belirtir. Kullanabileceğimiz methodlar;<\/p>\n<pre>\n<code class='language-php'>Route::get(&#0036url, &#0036callback);\nRoute::post(&#0036url, &#0036callback);\nRoute::put(&#0036url, &#0036callback);\nRoute::patch(&#0036url, &#0036callback);\nRoute::delete(&#0036url, &#0036callback);\nRoute::options(&#0036url, &#0036callback);<\/code>\n<\/pre>\n<p>Burada &ouml;nemli bir not belirtmekte fayda g&ouml;r&uuml;yorum. <strong>POST<\/strong>, <strong>PUT <\/strong>ve <strong>DELETE <\/strong>methodlarını &ccedil;ağırabilmek i&ccedil;in <strong><a href='\/yazi\/csrf' target='_blank'>CSRF<\/a>&nbsp;<\/strong>koruması yapmamız gerekli. Buna daha sonraki derslerimizde bahsedeceğim ama bu yazıda ufak bir not olarak belirtmek istedim.<\/p>\n<p>Konumuza d&ouml;necek olursak &lsquo;<strong>&#0036url<\/strong>&rsquo; gelen internet sitenizin adresi, &lsquo;<strong>&#0036callback<\/strong>&rsquo; ise &ccedil;alışacak fonksiyonu belirtiyor. İlk &ouml;rneğimize bakarsak &ccedil;alışacak &lsquo;<strong>&#0036url<\/strong>&rsquo; i&ccedil;in &lsquo;<strong>\/<\/strong>&rsquo; girilmiş ve &lsquo;<strong>&#0036callback<\/strong>&rsquo; i&ccedil;inse function ile başlayan b&ouml;l&uuml;m belirtilmiş. Burada fonksiyon ile beraber &lsquo;<strong>View<\/strong>&lsquo; &ccedil;alışması sağlanmış.<\/p>\n<p>Route ile&nbsp;<strong>Controller<\/strong>&nbsp;&ccedil;ağırmak i&ccedil;in aşağıdaki gibi bir kod gereklidir.<\/p>\n<pre>\n<code class='language-php'>Route::get('kullanici\/profil', 'UserController@uyeGoster');<\/code>\n<\/pre>\n<p>G&ouml;rd&uuml;ğ&uuml;n&uuml;z bile kullanılacak&nbsp;<strong>Controller<\/strong>&nbsp;&ccedil;ağırmak i&ccedil;in &lsquo;UserController@uyeGoster&rsquo; kullanıyoruz. Bu değişkende ilk &ouml;nce&nbsp;<strong>Controller&nbsp;<\/strong>ismi daha sonrada fonksiyonun adı kullanılmalıdır.<\/p>\n<h3><strong>Laravel Route İsimlendirme<\/strong><\/h3>\n<p>Laravel route i&ccedil;in isimlendirme (<strong>Name<\/strong>) kullanımı sistem i&ccedil;erisinde route i&ccedil;in link verebilmeyi kolaylaştırmak i&ccedil;in yapılır.<\/p>\n<pre>\n<code class='language-php'>Route::get('kullanici\/profil', 'UserController@uyeGoster')-&gt;name('profil');<\/code>\n<\/pre>\n<p>Yukarıdaki &ouml;rnekte bu route i&ccedil;in isimlendirme kullandık. Bu isimlendirmeyi laravel view i&ccedil;erisinde de şu şekilde kullanıyoruz;<\/p>\n<pre>\n<code class='language-php'>route('profil');<\/code>\n<\/pre>\n<p>Bu sayede route i&ccedil;in gerekli link otomatik olarak oluşturulacaktır.<\/p>\n<h3><strong>Laravel Route Gruplandırma<\/strong><\/h3>\n<p>Gruplandırma&nbsp;<strong>middleware, namespace, prefix<\/strong>&nbsp;gibi bir&ccedil;ok route bağlantısı olan durumlar i&ccedil;in uygundur.<\/p>\n<pre>\n<code class='language-php'>Route::namespace('Admin')-&gt;group(function () {\n    Route::get('yonetici', 'UserController@yoneticiGoster');\n});<\/code>\n<\/pre>\n<p>Yukarıdaki &ouml;rnekte kullanılacak olan&nbsp;<strong>Controller<\/strong>&nbsp;dosyalarının &lsquo;Admin&rsquo; klas&ouml;r&uuml; altında olduğunu belirttik. Prefix i&ccedil;in de bir &ouml;rnek verelim.<\/p>\n<pre>\n<code class='language-php'>Route::prefix('admin')-&gt;group(function () {\n    Route::get('yoneticiler', 'UserController@yoneticiListele');\n});<\/code>\n<\/pre>\n<p>Bu &ouml;rnekte ise url adresinin ilk b&ouml;l&uuml;m&uuml;nde &lsquo;admin&rsquo; gelen bağlantıların yapılacaklarını belirttik. Daha kısa bir a&ccedil;ıklama ile buradaki route bilgisine ulaşmak i&ccedil;in gelen adresin &lsquo;admin\/yoneticiler&rsquo; olması gereklidir.<\/p>\n<h3><strong>Laravel Route Parametre Kullanımı<\/strong><\/h3>\n<p>Route ile gelen parametreleri y&ouml;nlendirebiliriz. Bunun i&ccedil;in adresten alınabilecek parametreleri belirtmemiz gerekli.<\/p>\n<pre>\n<code class='language-php'>Route::get('yonetici\/{id}', 'UserController@yoneticiGoster');<\/code>\n<\/pre>\n<pre>\n<code class='language-php'>Route::get('yonetici\/{id?}', 'UserController@yoneticiGoster');<\/code>\n<\/pre>\n<p>Bu kodlar birbirininden tek farkı alttakinde yer alan &lsquo;?&rsquo;. &Ouml;nce soru işareti olmayanı a&ccedil;ıklayayım. Burada adresimiz &lsquo;\/yonetici\/1&rsquo; olarak gelmelidir. Bu &ouml;rnekte kullanılan &lsquo;1&rsquo; id yerine ge&ccedil;er ve kodun devamında yer alan&nbsp;<strong>Controller<\/strong>i&ccedil;erisinde kullanılacak bir parametre olarak g&ouml;nderilir. İkinci kod par&ccedil;asında ise soru işareti ile anlattığımız şey parametre olabilir ya da olmayabilir demektir. Yani ilk kod ile &lsquo;yonetici&rsquo; adresini &ccedil;alıştıramayız hata alırız ama ikinci kısım ile hem &lsquo;yonetici&rsquo; hem de &lsquo;yonetici\/1&rsquo; adreslerini &ccedil;alıştırabiliriz. Bunun en yaygın &ouml;rneği olarak şu senaryoyu d&uuml;ş&uuml;nebiliriz. Bir y&ouml;netim panelinde kullanıcıları listeleyecek ve bu listeden se&ccedil;ilen kullanıcının detay bilgisini g&ouml;stereceksiniz. Bunun i&ccedil;in laravel route sistemini iki şekilde yapabilirsiniz.<\/p>\n<pre>\n<code class='language-php'>Route::get('kullanici', 'UserController@yoneticiGoster');\nRoute::get('kullanici\/{id}', 'UserController@yoneticiGoster');<\/code><\/pre>\n<p>veya<\/p>\n<pre>\n<code class='language-php'>Route::get('kullanici\/{id?}', 'UserController@yoneticiGoster');<\/code>\n<\/pre>\n<p>Tabi arada bir satır var gibi g&ouml;r&uuml;nse de oluşturacağınız sistem b&uuml;y&uuml;d&uuml;k&ccedil;e bu kullanımın yararını g&ouml;rebilirsiniz. Unutmamak gerekir ki sistemi temiz kod yani takip edilebilir\/anlaşılır yazmak g&uuml;n&uuml;m&uuml;z d&uuml;nyasında son derece &ouml;nemlidir.<\/p>\n            ",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,framework,routes,routing",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"7",
       "baslik":"Laravel Controller Yapısı ve Oluşturulması",
       "url":"laravel-controller-yapisi-ve-olusturulmasi",
       "icerik":"\n<h3><strong>Laravel Controller Nedir?<\/strong><\/h3>\n<p>Laravel Controller, MVC yapısında frontend ve backend arasında işlem g&ouml;ren katmandır. Bunu biraz a&ccedil;mak gerekirse; mesela kullanıcıların &ouml;ny&uuml;zde etkileşimde oldukları bir form(&uuml;ye giriş formu) ile bu formun veritabanında yapılacağı sorgular arasında işlem yapılan kısmıdır. Aslında bizim veritabanı işlemlerini ve\/veya kullanıcıdan gelen verileri işleyeceğimiz b&ouml;l&uuml;md&uuml;r. Yaptığımız bu girişten sonra hemen Laravel Controller oluşturmaya başlayalım.<\/p>\n<h3><strong>Artisan Kullanarak Controller Oluşturma<\/strong><\/h3>\n<p>Bildiğiniz &uuml;zere Laravel sisteminde Artisan CLI (komut satırı aray&uuml;z&uuml;) bulunmaktadır. Bu aray&uuml;z bizi bir &ccedil;ok dertten kurtarır ve projelerimize hız kazandırır. Artisan aray&uuml;z&uuml;n&uuml; kullanarak Controller, Model, Migration oluşturabiliriz. Artisan ile Laravel Controller oluşturmak i&ccedil;in &ouml;ncelikle komut satırı yardımı ile sistemimizde Laravel yapısının y&uuml;kl&uuml; olduğu ana dizine erişiyoruz. Benim bilgisayarım i&ccedil;in bu adres;<\/p>\n<pre>\n<code class='language-bash'>C:\/xampp\/htdocs\/proje_dizini<\/code><\/pre>\n<p>Daha sonra&nbsp;aşağıda yer alan kod bloğunu yazıyoruz(ya da kopyala yapıştır yapıyoruz).<\/p>\n<pre>\n<code class='language-php'>php artisan make:controller AdminController<\/code><\/pre>\n<p>Bu kod satırında sonra bulunan &lsquo;<strong>AdminController<\/strong>&rsquo; bizim oluşturduğumuz Laravel Controller i&ccedil;in belirlediğimiz ad olacaktır.<\/p>\n<pre>\n<code class='language-php'>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PageController extends Controller\n{\n    \/\/\n}<\/code><\/pre>\n<p>Yazımın başında da belirttiğim gibi controller ile veritabanı işlemlerini yapabiliyoruz. Burada (belki daha &ouml;nceden de bildiğiniz)&nbsp;<strong>CRUD<\/strong>&nbsp;kavramından kısaca bahsetmem gerek.&nbsp;<strong>CRUD<\/strong>, ingilizce Create(Oluştur)-Read(Oku)-Update(G&uuml;ncelle)-Delete\/Destroy(Sil) kelimelerinin baş harflerinden oluşmuş bir kısaltmadır aslında. Daha &ouml;nce kullandığımız artisan komutuna basit bir parametre ekleyerek&nbsp;<strong>CRUD<\/strong>&nbsp;i&ccedil;in gerekli t&uuml;m fonksiyonları oluşturabiliriz. Yine Laravel y&uuml;klediğimiz anadizine geliyor ve aşağıdaki gibi daha &ouml;nce yazdığımı kodun sonuna&nbsp;<strong>&ndash;resource<\/strong>&nbsp;ekliyoruz.(&Ouml;nceki &ouml;rneği &ccedil;alıştırdıysanız Controller adı farklı olmalıdır)<\/p>\n<pre>\n<code class='language-php'>php artisan make:controller PageController --resource<\/code><\/pre>\n<pre>\n<code class='language-php'>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nclass PageController extends Controller\n{\n    \/**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function index()\n    {\n        \/\/\n    }\n\n    \/**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function create()\n    {\n        \/\/\n    }\n\n    \/**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  &#0036request\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function store(Request &#0036request)\n    {\n        \/\/\n    }\n\n    \/**\n     * Display the specified resource.\n     *\n     * @param  int  &#0036id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function show(&#0036id)\n    {\n        \/\/\n    }\n\n    \/**\n     * Show the form for editing the specified resource.\n     *\n     * @param  int  &#0036id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function edit(&#0036id)\n    {\n        \/\/\n    }\n\n    \/**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  &#0036request\n     * @param  int  &#0036id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function update(Request &#0036request, &#0036id)\n    {\n        \/\/\n    }\n\n    \/**\n     * Remove the specified resource from storage.\n     *\n     * @param  int  &#0036id\n     * @return \\Illuminate\\Http\\Response\n     *\/\n    public function destroy(&#0036id)\n    {\n        \/\/\n    }\n}\n<\/code><\/pre>\n<p>Farkı g&ouml;rebilirsiniz. Temel olarak CRUD i&ccedil;in gerekli t&uuml;m fonksiyonları tek bir satır ile oluşturduk. Bu fonksiyonları bira daha a&ccedil;ıklamaya &ccedil;alışayım. PageController ın Sayfa(Page) işlemleri i&ccedil;in kullanıldığını varsayalım.<\/p>\n<ul>\n    <li><strong>index()<\/strong>&nbsp;-&gt; t&uuml;m sayfaları listeme i&ccedil;in kullanılan fonksiyon,<\/li>\n    <li><strong>create()<\/strong>&nbsp;-&gt; yeni bir sayfa oluşturmak i&ccedil;in kullanılacak formu oluşturan fonksiyon<\/li>\n    <li><strong>store()<\/strong>&nbsp;-&gt; yeni sayfanın veritabanına yazılmasını kontrol eden fonksiyon<\/li>\n    <li><strong>edit()<\/strong>&nbsp;-&gt; d&uuml;zenlenecek sayfanın formunu oluşturan fonksiyon<\/li>\n    <li><strong>update()<\/strong>&nbsp;-&gt; d&uuml;zenlenecek sayfanın işlemlerini yapan fonksiyon<\/li>\n    <li><strong>destroy()<\/strong>&nbsp;-&gt; sayfayı yok eden&nbsp;silinmesi i&ccedil;in kullanılan fonksiyon<\/li>\n<\/ul>\n\n            ",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,controller,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"8",
       "baslik":"Laravel Controller Veri Aktarımı",
       "url":"laravel-controller-veri-aktarimi",
       "icerik":"\n<h3><strong>Route ile Laravel Controller Veri Aktarımı<\/strong><\/h3>\n<p>Daha &ouml;nceki derslerde bahsettiğimiz gibi route Laravel yapısı i&ccedil;in gelen isteklerin y&ouml;nlendirildiği alanlardır. Yani route ile controller y&ouml;nlendirmesi yapabileceğimiz i&ccedil;in veri aktarımını da yapabilmemiz gerekli. Başka bir değişle; .htaccess ile yaptığımız php dosyalarına veri aktarımını route ile yapabiliyoruz.<\/p>\n<p><img alt='laravel controller veri aktarımı' src='\/upload\/files\/route-controller-veri-aktarimi-1024x535.jpg' style='height:366px; width:700px' \/><\/p>\n<p>Yukarıdaki ekran g&ouml;r&uuml;nt&uuml;s&uuml;nde sol b&ouml;l&uuml;m <strong>routes\/web.php<\/strong> ve sağ b&ouml;l&uuml;mdeki g&ouml;rsel ise <strong>app\/Http\/Controllers\/PageController.php<\/strong>. Sol tarafa dikkat ederseniz iki adet yeni route var. Bunlar arasındaki fark tek bir soru işaretidir. Bu soru işaretinin anlamı ise &ldquo;id&rdquo; değişkeni olabilir ya da olmayabilir olarak değerlendirilir. Yani<\/p>\n<pre>\n<code class='language-php'>Route::get('sayfa\/{id}', 'PageController@index');<\/code><\/pre>\n<p>olan kod satırı i&ccedil;in &ldquo;id&rdquo; mutlaka olmalıdır. Olmadığında route hatası alınacaktır.<\/p>\n<p>Fakat;<\/p>\n<pre>\n<code class='language-php'>Route::get('sayfa\/{id?}', 'PageController@index');<\/code><\/pre>\n<p>olan kod satısı i&ccedil;inse &ldquo;id&rdquo; değişkeni şart değildir.<\/p>\n<p>Bu şekildeki url adreslerini contoller fonksiyonunda ise değişken atayarak kullanıyoruz. Sağ tarafta bulunan index(&#0036id) fonksiyonu url adresinden gelen id yi controller i&ccedil;inde kullanılabilir duruma getiriyor.<\/p>\n<h3><strong>View ile Laravel Controller Veri Aktarımı<\/strong><\/h3>\n<p>Route ile gelen, controller i&ccedil;erisinde oluşturulan ve\/ya veritabanı ile yapılan işlemler sonrası getirilen verilerin view tarafına ulaştırılmasıdır.&nbsp;Bu aşamada yukarıdaki ekran g&ouml;r&uuml;nt&uuml;s&uuml;n&uuml; baz aldığımızda page view&rsquo;a aktarmak i&ccedil;in;<\/p>\n<pre>\n<code class='language-php'>return view('page', compact('id'));<\/code><\/pre>\n<p>yada<\/p>\n<pre>\n<code class='language-php'>return view('page')-&gt;with('id', &#0036id);<\/code><\/pre>\n<p>Yukarıdaki kod blokları iki şekilde de aynı şekilde sonu&ccedil;lanır ve bu şekilde contorller ile view arasında veri aktarımını sağlamış oluruz. İlerki derslerde değinebilir ama yeri gelmişken view i&ccedil;erisinde bu değişkeni nasıl yazdırıldığından bahsetmek istiyorum. Blade dosyasında sadece yazdırmak i&ccedil;in<\/p>\n<pre>\n<code class='language-php'>Gelen id: {{&#0036id}}<\/code><\/pre>\n<p>kod bloğunu kullanabildiğimiz gibi<\/p>\n<pre>\n<code class='language-php'>Gelen id: &lt;?php echo &#0036id; ?&gt;<\/code><\/pre>\n<p>şeklinde de bildiğimiz php ile yazdırabiliriz.<\/p>\n            ",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"mvc,oop",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"9",
       "baslik":"Laravel Blade Templates",
       "url":"laravel-blade-templates",
       "icerik":"\n<h3><strong>Laravel Blade Templates<\/strong><\/h3>\n<p>Blade aslında bir şablon sistemidir. İ&ccedil;erisine alışık olduğunu PHP kodlarını da yazabilmeniz bir &ccedil;ok yazılımcının Laravel &ouml;ğrenirken kendini rahat hissetmesini sağlamaktadır. Daha &ouml;nce PHP ile site ya da uygulama yazdıysanız &ouml;zellikle &uuml;st veya alt kısımlar i&ccedil;in tek bir dosya kullanıp, onu her sayfaya &lsquo;include&rsquo; ile &ccedil;ağırmışsınızdır. Bunun amacı t&uuml;m sitenizin &uuml;st kısmında yapacağınız değişikliğin tek tek her php dosyasında değil; tek bir yerden yapmanızı sağlamaktır. Laravel Blade Templates, i&ccedil;inse bu &ouml;zellik layouttur. PHP ile yaptığınız &lsquo;include&rsquo; durumundan farklı olarak burada bir ana şablon tanımlar ve diğer sayfaları bu şablonu &lsquo;extend&rsquo; ederek oluşturursunuz. Hemen bir şablon &ouml;rneği yazalım.<\/p>\n<pre>\n<code class='language-php'>&lt;!DOCTYPE html&gt;\n&lt;html lang='en'&gt;\n&lt;head&gt;\n    &lt;meta charset='UTF-8'&gt;\n    &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;\n    &lt;meta http-equiv='X-UA-Compatible' content='ie=edge'&gt;\n    &lt;title&gt;@yield('baslik')&lt;\/title&gt;\n&lt;\/head&gt;\n&lt;body&gt;\n    @yield('icerik')\n&lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n<p>Yukarıdaki şablona dikkat ederseniz &lsquo;title&rsquo; etiketleri arasında @yield(&lsquo;başlık&rsquo;) kodunu yerleştirdik. Bu oluşturacağımız diğer sayfalar ile bu b&ouml;l&uuml;m&uuml;n&uuml;n iletişimini sağlayacak olan kod kısmıdır. Şimdi de bir alt daha doğrusu genişletilmiş bir sayfa yazalım.<\/p>\n<pre>\n<code class='language-php'>@extends('sablon')\n@section('baslik', 'Sayfa Başlık')\n@section('icerik')\n    &lt;p&gt;Buraya içerik gelecek&lt;\/p&gt;\n@endsection<\/code><\/pre>\n<p>Şablon sayfamızdaki değişkenlerle bir sayfa oluşturmak &ccedil;ok kolaylaştı. İhtiyacımız olan alanları ekleyip o alanları doldurmamız yeterli olacak.<\/p>\n<p>İlk satırda yer alan &lsquo;extends&rsquo; oluşturduğumuz alt sayfanın hangi &uuml;st sayfadan &ccedil;oğaltılacağını a&ccedil;ıklıyor. Daha sonrada sizin de g&ouml;receğiniz gibi baslik ve icerik i&ccedil;in gerekli alanları belirterek alt sayfanın verilerini bu alanlara yazdık. Bu şekilde alt sayfalar i&ccedil;in genel bir şablona sahip oluyoruz.<\/p>\n<h2>Laravel Blade Templates D&ouml;ng&uuml;ler<\/h2>\n<p>Yazılım dillerinde belki de en &ccedil;ok kullanılan terimlerdir d&ouml;ng&uuml;ler. Bu y&uuml;zden yazımda bu d&ouml;ng&uuml;lere değinmenin uygun olacağını d&uuml;ş&uuml;nd&uuml;m.<img alt='laravel blade templates kullanımı' src='\/upload\/files\/laravel-blade-templates-1024x325.jpg' style='height:222px; width:700px' \/><\/p>\n<p>&Uuml;stteki ekran g&ouml;r&uuml;nt&uuml;lerinde sol taraf blade ile sağ taraf ise d&uuml;z PHP ile yapılmıştır. &Ouml;zellikle sol b&ouml;l&uuml;mde se&ccedil;ili alanda &ouml;nemli bir nokta var. PHP kodlarının i&ccedil;erisine bir yazı yazdırmak istediğimizde ya PHP etiketlerini kapatmamız ya da &lsquo;echo&rsquo; kullanmamız gerekli. Fakat Laravel Blade Templates i&ccedil;in bu duruma gerek yok. D&ouml;ng&uuml;ler kendi satırlarında biter ve alt satıra indiğinizde artık orası HTML olarak okunur.<\/p>\n<p>Yine sol tarafta g&ouml;rebileceğiniz gibi değişkenler de &lsquo;{{&lsquo; ile &lsquo;}}&rsquo; arasına yazılarak kısaltılmış bir &lsquo;echo&rsquo; kullanılmış olunuyor. Kullanılan &ccedil;ift s&uuml;sl&uuml; parantezler XSS engellemen adına &lsquo;htmlspecialchars&rsquo; fonksiyonu kullanılmış hali ile gelmektedir. Yani HTML etiketleri bu değişkenden temizlenir. Siz eğer HTML etiketli halini kullanmak isterseniz &lsquo;{!!&rsquo; ile &lsquo;!!}&rsquo; arasına yazmalısınız değişkeninizi. Yine bir &ouml;rnek kod ile anlatmaya &ccedil;alışayım.<\/p>\n<pre>\n<code class='language-php'>&#0036x = '&lt;p&gt;Buraya bir paragraf gelecek&lt;\/p&gt;';\n{{&#0036x}} \/\/ çıktısı Buraya bir paragraf gelecek\n{!!&#0036x!!} \/\/ çıktısı &lt;p&gt;Buraya bir paragraf gelecek&lt;\/p&gt;<\/code><\/pre>\n<p>&nbsp;<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,composer,framework,oop,blade",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"10",
       "baslik":"Laravel Model Yapısı ve Kullanımı",
       "url":"laravel-model-yapisi-ve-kullanimi",
       "icerik":"<h2><strong>Laravel Model Nedir?<\/strong><\/h2>\n<p>Laravel Model, MVC yapısında veritabanı işlemlerinin yapıldığı b&ouml;l&uuml;md&uuml;r. Daha &ouml;nceki yazılarımdan birinde Controller yapısından bahsederken, backend işlemlerinin de Controller tarafından yapıldığından bahsetmiştim. Controller, Model aracılığı ile bu işlemleri yapmaktadır. Yani Model, veritabanı iletişiminden sorumlu kısımdır.<\/p>\n<h2><strong>Artisan Kullanarak Model Oluşturma<\/strong><\/h2>\n<p>Daha &ouml;nceki yazılarımda bahsettiğim gibi Laravel Artisan CLI bizim işimizi kolaylaştırmaktadır. Bu komut satırını &ouml;ğrenmenin hız kazanma adına yararı olduğunu d&uuml;ş&uuml;n&uuml;yorum. Artisan kullanarak Laravel Model oluşturmak i&ccedil;in &ouml;ncelikle komut satırı kullanarak Laravel ana dizine erişiyoruz. Benim bilgisayarım i&ccedil;in bu adres;<\/p>\n<pre>\n<code class='language-bash'>C:\/xampp\/htdocs\/proje_dizini<\/code><\/pre>\n<p>Daha sonra&nbsp;aşağıda yer alan kod bloğunu yazıyoruz(ya da kopyala yapıştır yapıyoruz).<\/p>\n<pre>\n<code class='language-php'>php artisan make:model Page<\/code><\/pre>\n<p>Yukarıda yer alan kod satırı sayesinde &lsquo;Page&rsquo; Model dosyasını oluşturuyoruz. Model oluşturma başarı ile sonu&ccedil;landıysa app klas&ouml;r&uuml;n&uuml;n altında Page isimli bir dosya olmuşması gereklidir.<\/p>\n<p><img alt='laravel model oluşturma' src='\/upload\/files\/laravel-model.jpg' style='height:538px; width:700px' \/><\/p>\n<p>Tabi burada unutmamamız gereken Model ile kullanılacak veritabanı tablosununda olması. Bu işlem i&ccedil;in isterseniz manuel olarak bir tablo oluşturabilirsiniz ya da yine Artisan kullanarak Migration oluşturabilirsiniz.Hen&uuml;z Migration yapısından bahsetmediğimiz i&ccedil;in biz bu yazıda manuel olarak bir tablo oluşturalım. Veritabanı değişkenlerini .env dosyasından alacağız buradaki değişikliklerin yapılmış olmasına dikkat edelim. Eğer .env size yabancı geldi ise&nbsp;<a href='\/yazi\/laravel-konfigurasyonu' rel='noopener' target='_blank'>Laravel Konfig&uuml;rasyonu<\/a>&nbsp;yazıya bir g&ouml;z atmanızı tavsiye ederim.<\/p>\n<p>Yine kendi kurulumuma g&ouml;re benim .env dosyamdaki veritabanı ile ilgili kısım şu şekildedir;<\/p>\n<pre>\n<code class='language-php'>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=dbismi\nDB_USERNAME=root\nDB_PASSWORD=<\/code><\/pre>\n<p>tabi lokal bir kurulum olduğu i&ccedil;in şifre kısmı boş bırakılmıştır. Ger&ccedil;ek sunucuda bu b&ouml;l&uuml;m&uuml;n g&uuml;&ccedil;l&uuml; bir şifre ile dolu olması gereklidir.<\/p>\n<p>Phpmyadmin yardımı ile dbismi adlı bir veritabanı oluşturup i&ccedil;erisine pages tablosunu ekledim. Tablo yapısı ise<\/p>\n<pre>\n<code class='language-php'>id =&gt; int 11, primary key, autoincrement\nbaslik =&gt; varchar 100\nicerik =&gt; text\naktif =&gt; int 1, default 0<\/code><\/pre>\n<p>Burada Laravel Model i&ccedil;in &ouml;nemli bir konuya dikkat etmeniz gerekmektedir. Oluşturduğunuz Model adı ile veritabanındaki tablo arasında bir ilişki vardır. Bu ilişki oluşturduğunuz tablonun, Model isminin k&uuml;&ccedil;&uuml;k harf ile başlayan ve İngilizce olarak &ccedil;oğul yapılmış hali olmasıdır.<\/p>\n<pre>\n<code class='language-php'>Page (model) =&gt; pages (tablo)\nCity (model) =&gt; cities (tablo)<\/code><\/pre>\n<p>Peki bu şart mı? tabi ki hayır fakat proje takip edilebilirliği ve hız bakımından tavsiye edilen methoddur. Diyelim ki siz bunu yapmak istemiyor veya daha &ouml;nceki projenizi Laravel yapısına taşımak istiyorsunuz. Tablo isminizi &lsquo;sayfalar&rsquo; olarak kullanmak i&ccedil;in Laravel Model i&ccedil;erisine &nbsp;&#0036table değişkeni belirtmeniz gerekli.<\/p>\n<pre>\n<code class='language-php'>protected &#0036table = 'sayfalar';<\/code><\/pre>\n<p>Yine aynı şekilde Primary Key olarak id kullanmayacaksanız eğer onu da,<\/p>\n<pre>\n<code class='language-php'>protected &#0036primaryKey = 'sayfa_id';<\/code><\/pre>\n<p>olarak belirtmeniz gerekli.<\/p>\n<p>Yukarıda bahsettiğim gibi bu yazıda Migration yapısını anlatmayacağım fakat Migration kullanarak oluşturulan tablolarda timestamps değişkeni vardır. Bu değişken tablonuza &lsquo;created_at&rsquo; ve &lsquo;updated_at&rsquo; kolonları ekler. Biz manuel oluşturduğumuz tablomuza bunları eklemediğimiz i&ccedil;in Model yapımıza bunları tabloda aramaması gerektiğini s&ouml;ylememiz gerek. Yoksa Model hata oluşturacaktır. Bunun i&ccedil;in,<\/p>\n<pre>\n<code class='language-php'>public &#0036timestamps = false;<\/code><\/pre>\n<p>satırı Model i&ccedil;erisine eklememiz gereklidir.<\/p>\n<p>Laravel Model yapısında hangi kolonun yazılabilir olduğu sizin tarafınızdan mutlaka belirtilmelidir. Yukarıdaki &ouml;rnek tablomuzda &lsquo;aktif&rsquo; kolonunun değiştirilmesini istemediğimizi d&uuml;ş&uuml;n&uuml;rsek bunun i&ccedil;in Model i&ccedil;erisine<\/p>\n<pre>\n<code class='language-php'>protected &#0036fillable = ['baslik','icerik'];<\/code><\/pre>\n<p>Burada g&ouml;rd&uuml;ğ&uuml;n&uuml;z gibi &lsquo;aktif&rsquo; ve &lsquo;id&rsquo; kolonlarımız yok. Bunların olmaması Laravel sistemine bunların manip&uuml;le edilmemesi gerektiği, korunması gerektiğini belirtir. Yani buraya yazmadığımız kolonlar Controller ile değiştirilemez. Laravel i&ccedil;in bu bir &ccedil;eşit g&uuml;venlik &ouml;nlemidir ve bu &ouml;nlem Mass Assignment olarak adlandırılır.<\/p>\n<p>Eğer biz t&uuml;m alanların değiştirilebilir olmasını istiyorsak ya da sadece &lsquo;id&rsquo; kolonunun korunmasını istiyorsak ve tablomuzda 30 adet kolon varsa bunu tek tek yazmamız mı gerekecek? Tabi ki hayır. S&uuml;rekli bizim iyiliğimizi d&uuml;ş&uuml;nen Laravel bunun i&ccedil;inde &ccedil;&ouml;z&uuml;m oluşturmuş &lsquo;guarded&rsquo;.<\/p>\n<pre>\n<code class='language-php'>protected &#0036guarded = [];\nya da\nprotected &#0036guarded = ['id'];<\/code><\/pre>\n<p>Bu şekilde belirttiğimiz kolonlar harici olanların hepsinin değiştirilebilir olduğunu belirtmiş oluyoruz.<\/p>\n<p>Son olarak yukarıdaki kod satırlarının Model i&ccedil;erisindeki yerleşimi aşağıda yer alan resimdeki gibi olmalıdır.<\/p>\n<p>&nbsp;<\/p>\n<p><img alt='laravel model son hali' src='\/upload\/files\/laravel-model-son.jpg' style='height:346px; width:700px' \/><\/p>\n<p>&nbsp;<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,composer,framework,oop,model",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"11",
       "baslik":"Laravel Raw SQL Queries",
       "url":"laravel-raw-sql-queries",
       "icerik":"<h2><strong>Laravel Raw SQL Queries Nedir?<\/strong><\/h2>\r\n\r\n<p>Laravel Raw Sql Queries aslında laravel sisteminde standart sql s&ouml;z dizilimi yazmanızı sağlayan bir sistemdir. Laravel i&ccedil;erisinde daha sonraki derslerimde anlatacağım Eloquent sisteminden farklı olarak burada d&uuml;z php yazılımından alışık olduğunuz sorguları yazabilmenizi sağlar. Aralarındaki en &ouml;nemli fark ise b&uuml;y&uuml;k verilerde hızdır. Raw SQL Queries, Eloquent yazımıda g&ouml;re daha hızlı &ccedil;alışmaktadır. O y&uuml;zden b&uuml;y&uuml;k verili sistemlerde raw kullanmak performans a&ccedil;ısından olumlu olacaktır.&nbsp;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">use Illuminate\\Support\\Facades\\DB;<\/code><\/pre>\r\n\r\n<p>satırını eklememiz gerek. Bu sayede yazdığımız sql &ouml;bekleri Laravel tarafından işlenecektir.&nbsp;Şimdi Laravel Raw SQL Queries ile ilgili &ouml;rnek sorgular yazalım.<\/p>\r\n\r\n<p><strong>Laravel Raw SQL Queries select<\/strong><\/p>\r\n\r\n<p>Select sorgusunu i&ccedil;in PageController dosyasındaki index() fonksiyonunda kullanalım.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function index(){\r\n    $pages = DB::select('select * from pages where aktif= ?', [1]);    \r\n    $pages = DB::select('select * from pages where aktif= :aktif',['aktif' = 1]);\r\n}<\/code><\/pre>\r\n\r\n<p>Burada ikisi de aynı işlemi yapan satırlar var. Bunlardan birisini kullanmanız yeterli olacaktır. Ben sizi kullanım şeklini g&ouml;stermek i&ccedil;in aynı işlemi yapan iki ayrı satır ekledim.<img alt=\"Laravel raw sql queries\" src=\"\/upload\/files\/laravel-controller-r.jpg\" style=\"height:719px; width:750px\" \/><\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,sql,mvc,oop,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"12",
       "baslik":"Laravel Query Builder",
       "url":"laravel-query-builder",
       "icerik":"<p>&Ouml;zelleştirilmiş bir standart SQL olarak d&uuml;ş&uuml;nebiliriz. Model dosyası olmayan tablolar i&ccedil;in bu sistemi kullanabiliriz. Bir &ouml;nceki yazımızda bahsettiğimiz Raw SQL Queries yapısından farklı olarak daha d&uuml;zenli kod yazılması ve bazı işlemlerin daha akıcı şekilde yazılabilmesini sağlar.<\/p>\r\n\r\n<p>Bir &ouml;nceki yazımızda oluşturduğumuz Page Controller dosyasını kullanalım. &Ouml;nceki yazımızda yer alan Page Controller dosyasımızı hatırlamak i&ccedil;in ekleyelim.<\/p>\r\n\r\n<p><img alt=\"Laravel raw sql queries\" src=\"\/upload\/files\/Laravel-raw-sql-queries-1024x543.jpg\" style=\"height:398px; width:750px\" \/><\/p>\r\n\r\n<p>Yukarıda yer alan g&ouml;rseldeki kodlarımızı bir de Query Builder ile yapalım.<\/p>\r\n\r\n<p><img alt=\"laravel query builder\" src=\"\/upload\/files\/laravel-query-builder-1024x695.jpg\" style=\"height:509px; width:750px\" \/><\/p>\r\n\r\n<p>Tıpkı Laravel Raw SQL Queries i&ccedil;in olduğu gibi Laravel Query Builder kullanmak i&ccedil;in de controller dosyasından &uuml;st b&ouml;l&uuml;m&uuml;ne &lsquo;DB&rsquo; methodunu &ccedil;ağırmamız gerek. Bunun i&ccedil;in &lsquo;namespace&rsquo; satırının altına<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">use Illuminate\\Support\\Facades\\DB;<\/code><\/pre>\r\n\r\n<p>satırını eklememiz gerek. Bu sayede yazdığımız sql &ouml;bekleri Laravel tarafından işlenecektir.<\/p>\r\n\r\n<p>Laravel Query Builder bizim i&ccedil;in bir &ccedil;ok kolaylığı beraberinde getiriyor. Mesela &ccedil;oklu insert işlemi yapabiliyoruz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">DB::table('pages')-&gt;insert([\r\n    [\"baslik\" =&gt; \"Laravel Raw SQL Queries\", \"icerik\" =&gt; \"Laravel Raw SQL Queries ekleme işlemlerini yaptık\", \"aktif\" =&gt; 1]\r\n    [\"baslik\" =&gt; \"Laravel Query Builder\", \"icerik\" =&gt; \"Laravel Query Builder ekleme işlemlerini yaptık\", \"aktif\" =&gt; 1]\r\n]);<\/code><\/pre>\r\n\r\n<p>Yukarıda g&ouml;r&uuml;ld&uuml;ğ&uuml; gibi iki insert işlemini tek bir Query ile yapabiliyoruz.<\/p>\r\n\r\n<p><strong>Laravel Query Builder Where Kullanımı<\/strong><\/p>\r\n\r\n<p>Bu yapıda where kullanımı olduk&ccedil;a gelişmiştir. Bu tanım iki ya da &uuml;&ccedil; değişiken ile kullanılabiliyor. Bunu şu şekilde a&ccedil;ıklayabiliriz. Eğer iki değişkenli bir tanım kullanılacak ise &ouml;rneğin<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', 1)-&gt;get();<\/code><\/pre>\r\n\r\n<p>Bu kod satırının a&ccedil;ıklaması standart bir SQL ile ş&ouml;yle a&ccedil;ıklanabilir;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">select * from pages where aktif=1;<\/code><\/pre>\r\n\r\n<p>Toparlayacak olursak eğer iki değişkenli bir where ifadesi kullanmak isterseniz bu eşitlik anlamı taşır. Fakat eşitlik hari&ccedil; her durum i&ccedil;in &uuml;&ccedil;&uuml;nk&uuml; bir değişken kullanmalıyız.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', '!=', 1)-&gt;get();\r\n\r\nbunun sql karşılığı ise\r\n\r\nselect * from pages where aktif!=1;<\/code><\/pre>\r\n\r\n<p>Aynı şekilde birden fazla where ifadesi kullanabiliriz. Bunun i&ccedil;in ifadeleri peşpeşe eklememiz yeterli.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">DB::table('pages')-&gt;where('aktif', 1)-&gt;where('baslik','LIKE', '%Laravel%')-&gt;orWhere('icerik','')-&gt;get();<\/code><\/pre>\r\n\r\n<p>Yazdığımız bu kod satırı ile iki adet where ve bir adet orWhere ifadesi kullandık. Bunu SQL kodu olarak yazmak istersek aşağıdaki gibi bir kod yazabiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">select * from pages where aktif = 1 and baslik Like '%Laravel%' or icerik = '';<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,oop,sql,query-builder",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"13",
       "baslik":"Laravel Eloquent CRUD İşlemleri",
       "url":"laravel-eloquent-crud-islemleri",
       "icerik":"<p>&nbsp;<\/p>\r\n\r\n<p>Merhaba Mobilhanem.com takip&ccedil;ileri,<br \/>\r\nLaravel ile eğitim serimizin yeni dersinde<strong>&nbsp;Laravel Eloquent&nbsp;<\/strong>yapısı kullanarak&nbsp;<strong>CRUD<\/strong>&nbsp;yani Create (oluşturma), Read(Okuma), Update(G&uuml;ncelleme) ve Delete\/Destroy(Silme) işlemlerini anlatmaya &nbsp;&ccedil;alışacağım. Sizin yorumlarınız &ccedil;ok &ouml;nemli l&uuml;tfen paylaşım ve yorumlarınızı bizden esirgemeyin<\/p>\r\n\r\n<h2>Laravel&nbsp;<strong>Eloquent<\/strong>&nbsp;Nedir?<\/h2>\r\n\r\n<p>Laravel yapısının veritabanı işlemlerini model aracılığı ile kolayca yapmanızı sağlayan bileşenidir. Bu sayede &ouml;zellikle bir sonraki yazımızda işleyeceğimiz tablolar arası ilişki sistemini kolayca kurabilirsiniz.<\/p>\r\n\r\n<p>Hemen ilk değişikliğimiz Laravel Raw SQL Queries ve Laravel Query Builder kullanırken ihtiyacımız olan &lsquo;<strong>DB<\/strong>&rsquo; methodunu kaldırıp yerine Laravel Eloquent i&ccedil;in gerekli olan modelimizi eklemek oldu. Bunun i&ccedil;in &lsquo;<strong>namespace<\/strong>&rsquo; satırının altına<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">use App\\Page;<\/code><\/pre>\r\n\r\n<p>satırını ekleyerek yapmamız gerek. Tabi bir &lsquo;pages&rsquo; tablosunu kullanacağımız i&ccedil;in &lsquo;Page&rsquo; modelini ekledik.<\/p>\r\n\r\n<p>Laravel Eloquent olduk&ccedil;a anlaşılır ve takip edilebilir bir sistemdir. Mesela yeni bir veri eklemek i&ccedil;in<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$page = new Page;\r\n$page-&gt;baslik = \"Laravel Eloquent\";\r\n$page-&gt;icerik = \"Laravel Eloquent ekleme işlemlerini yaptık\";\r\n$page-&gt;aktif = 1;\r\n$page-&gt;save();<\/code><\/pre>\r\n\r\n<p>yapmamız yeterli burada sol b&ouml;l&uuml;mdeki -&gt; sonra gelenlerin tablodaki kolon isimleri olduğuna dikkat etmemiz gerek.<\/p>\r\n\r\n<p>Ayrıca t&uuml;m veriyi almak i&ccedil;in de olduk&ccedil;a basit olan<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$pages = Page::all();<\/code><\/pre>\r\n\r\n<p>satırını kullanmamız yeterli olacaktır.<\/p>\r\n\r\n<p><strong>Laravel Eloquent Where Kullanımı<\/strong><\/p>\r\n\r\n<p>Bu yapıda aynı Query Builder gibi where kullanımı olduk&ccedil;a gelişmiştir. Bu tanım iki ya da &uuml;&ccedil; değişiken ile kullanılabiliyor. Bunu şu şekilde a&ccedil;ıklayabiliriz. Eğer iki değişkenli bir tanım kullanılacak ise &ouml;rneğin<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Page::where('aktif', 1)-&gt;get();<\/code><\/pre>\r\n\r\n<p>Eğer iki değişkenli bir where ifadesi kullanırsanız bu eşitlik anlamı taşır. Eşitlik harici durumlar i&ccedil;in ise &uuml;&ccedil; değişkenli where kullanmalısınız<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">Page::where('aktif', '!=', 1)-&gt;get();<\/code><\/pre>\r\n\r\n<p>bunun sql karşılığı ise,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-sql\">select * from pages where aktif!=1;<\/code><\/pre>\r\n\r\n<p>G&ouml;rd&uuml;ğ&uuml;n&uuml;z gibi aslında Query Builder da yer alan tablo odaklamasını bizim yerimize Laravel Eloquent model yapısını kullanarak yapmaktadır.<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,crud,mvc,oop,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:44:24",
       "updated_at":"2019-07-30 10:44:24"
    },
    {
       "id":"14",
       "baslik":"Laravel Eloquent One to One",
       "url":"laravel-eloquent-one-to-one",
       "icerik":"<p><strong>one-to-one relationship<\/strong>&nbsp;ilişki tasarımının temelidir. &Ouml;rneğin, Kullanıcı modelinin sadece bir adet banka hesabı olduğunu d&uuml;ş&uuml;n&uuml;rsek sadece hesap numarasına ihtiyacı var. B&ouml;ylece Kullanıcı ve Banka modelini <strong>one to one relationship&nbsp;<\/strong>olarak yapabiliriz.<\/p>\r\n\r\n<p>User modeli,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function hesap(){\r\n   return $this-&gt;hasOne('App\\Banka');\r\n}<\/code><\/pre>\r\n\r\n<p>Banka modeli,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function user(){\r\n    return $this-&gt;belongsTo('App\\User');\r\n}<\/code><\/pre>\r\n\r\n<p>Kullanıcı modelini kullanarak kullanıcının hesap modelinden verileri aşağıdaki gibi &ccedil;ekebiliriz.<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">$user = User::find(1)-&gt;hesap;<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,oop,framework",
       "aktif":"1",
       "created_at":"2019-07-30 10:46:53",
       "updated_at":"2019-07-30 11:36:12"
    },
    {
       "id":"15",
       "baslik":"Laravel Eloquent One to Many",
       "url":"laravel-eloquent-one-to-many",
       "icerik":"<p>One To Many ilişkisi, hasMany ilişkisi olarakta bilinir ve bir tablodaki bir kayıdın diğer tablodaki birden &ccedil;ok kayıt ile ilişkisini tanımlar. Laravel Eloquent&#39;de, bir modelin birden fazla model ile bağı olabilir. &Ouml;rnek olarak, Blog sisteminde bir kategorinin birden fazla yazısı olabilir.<\/p>\r\n\r\n<p>Yazı modeli;<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Yazi extends Model{\r\n    public function kategori(){\r\n        return $this-&gt;belongsTo('App\\Kategori');\r\n    }\r\n}\r\n<\/code><\/pre>\r\n\r\n<p>Kategori modeli,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">&lt;?php\r\nnamespace App;\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\nclass Kategori extends Model{\r\n    public function yazilar()    {\r\n        return $this-&gt;hasMany('App\\Yazi');\r\n    }\r\n}<\/code><\/pre>\r\n\r\n<p>şeklinde ilişki tanımlanabilir. Bu ilişkide kategori modelinde birden fazla yazı ilişkili olduğu i&ccedil;in, yazı modelinde her yazının sadece bir adet kategorisi bulunduğunu g&ouml;sterdik. Aşağıdaki kod bloğu ise veri tabanına oluşturduğumuz dummy verileri arasındaki ilişkiyi g&ouml;sterecek,<\/p>\r\n\r\n<pre>\r\n<code class=\"language-php\">public function index(){\r\n        $yazilar = Yazi::with('kategori')-&gt;get();\r\n        return $ayzilar;\r\n}<\/code><\/pre>\r\n\r\n<p>&nbsp;<\/p>",
       "kategori_id":"2",
       "user_id":"1",
       "etiketler":"laravel,php,mvc,oop,relation,sql,db",
       "aktif":"1",
       "created_at":"2019-07-30 11:22:32",
       "updated_at":"2019-07-30 11:22:32"
    }
 ]